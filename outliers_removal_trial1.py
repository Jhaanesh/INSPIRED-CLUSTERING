# -*- coding: utf-8 -*-
"""OUTLIERS_REMOVAL_TRIAL1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YxXsmeu9c9su5U0110NH0LCkZVF2lUm_

In this code book, i have tried to remove the outliers of the data set using Z score
"""

pip install pandas scipy scikit-learn matplotlib seaborn

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from scipy.stats import skew
import seaborn as sns
import scipy.stats as stats

#Loading the dataset
data = pd.read_excel('diabetes_dataset.xlsx')
data

#select the variables for clsutering
features = data[['ageonset', 'waist', 'bmi', 'HbA1c', 'tgl', 'hdl', 'cpf', 'cps']]

# Standardize the features
scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)
# Perform K-means clustering
kmeans = KMeans(n_clusters=4, max_iter=300, random_state=0)  # Choose the number of clusters (e.g., 4)
kmeans.fit(scaled_features)

# Get the cluster labels
labels = kmeans.labels_

# Add the cluster labels to the original data
data['Cluster'] = labels



#Method 1: Removing outliers using Z-Score
def remove_outliers_z_score(df, cluster_col, features_cols, threshold=3):
    filtered_data = df.copy()
    for cluster in filtered_data[cluster_col].unique():
        cluster_data = filtered_data[filtered_data[cluster_col] == cluster]
        z_scores = stats.zscore(cluster_data[features_cols])
        abs_z_scores = abs(z_scores)
        # Filter the cluster data, not the entire DataFrame
        cluster_data = cluster_data[(abs_z_scores < threshold).all(axis=1)]
        # Update the filtered_data by removing outliers from the current cluster
        filtered_data = filtered_data.drop(cluster_data.index, errors='ignore')
    return filtered_data

features_cols = ['ageonset', 'waist', 'bmi', 'HbA1c', 'tgl', 'hdl', 'cpf', 'cps']
data_no_outliers_z_score = remove_outliers_z_score(data, 'Cluster', features_cols)

print(data_no_outliers_z_score.head())

data1 = data.drop(['ID', 'gender', 'diabetes', 'smoking_history','blood_glucose_level','hypertension',	'heart_disease'], axis=1)
data1

# Calculate mean and standard deviation for each cluster
cluster_summary = data1.groupby('Cluster').agg(['mean', 'std'])

# Display the summary
print(cluster_summary)

# Round the values and format in plus/minus style
def format_plus_minus(df, decimal_places=2):
    formatted_df = df.copy()
    for column in df.columns:
        # Extract the statistic ('mean' or 'std') from the second level of the MultiIndex
        statistic = column[1]
        if statistic == 'std':
            mean_col = (column[0], 'mean')  # Construct the corresponding mean column name
            formatted_df[column] = df.apply(
                lambda row: f"{round(row[mean_col], decimal_places)} Â± {round(row[column], decimal_places)}",
                axis=1
)
    # Drop the mean columns as they are no longer needed
    formatted_df = formatted_df.drop([col for col in formatted_df.columns if 'mean' in col[1]], axis=1)
    return formatted_df

# Format the DataFrame
cluster_summary_formatted = format_plus_minus(cluster_summary)

# Transpose the DataFrame to have clusters as columns
cluster_summary_transposed = cluster_summary_formatted.T

# Display the transposed DataFrame
print(cluster_summary_transposed)

